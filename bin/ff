#!/usr/bin/env bash
#
# Author: Davide Galassi <davxy@datawok.net>
# Version: 0.1.1
#
# Fast tool to search into files using fuzzy finder
#
# Depends on
# - ripgrep
# - fzf
# - wl-copy (optional): to copy to clipboard a result via <C-y>.
#                       Can be replaced by any clipboard manager.
#
# Assumptions for live editor open:
# - When using the `EDITOR` env variable set to default editor.
# - The editor of choice should be able to open a file like: `$EDITOR finapath:line`

edit=0
ignore_case="+i"
query=""
exit_on_exec=0
fzf_nth="3.."

function help() {
    echo "Usage: ff [options]"    
    echo ""
    echo "Option:"
    echo "-e edit the selected file(s)"
    echo "-i case insensitive search"
    echo "-h display this help message"
    echo "-q query"
    echo "-x exit on execution"
    echo "-f include file path"
    exit
}

while getopts "eiq:xfh" opt; do
    case $opt in
        e) edit=1 ;;
        i) ignore_case="-i" ;;
        q) query="$OPTARG" ;;
        x) exit_on_exec=1 ;;
        f) fzf_nth="1.." ;;
        h | *) help ;;
    esac
done

# Key bindings
COPY_FILE_PATH='ctrl-y:execute(echo -n {1}:{2} | wl-copy)'
KEYS="$COPY_FILE_PATH"
# Optional flag for execution and exit behavior
if [[ $exit_on_exec == 1 ]]; then
  KEYS="$KEYS+abort"
fi

if [[ $include_file == 1 ]]; then
    fzf_nth=
fi

while true; do
    # Search using rg and fzf with preview
    out=$(rg . --line-number --no-heading --glob '!.git' | \
          fzf -m ${ignore_case} \
            --no-sort \
            --tac \
            --exact \
            --delimiter ':' \
            --nth "$fzf_nth" \
            --exit-0 \
            --multi \
            --print-query --query="$query" \
            --preview 'bat --style=full --color=always --highlight-line {2} {1}' \
            --preview-window 'up,~4,+{2}+4/2' \
            --bind "$KEYS")

    if [[ $? != 0 ]]; then
        exit
    fi

    # Extract query
    query=$(echo "$out" | cut -d$'\n' -f1)
    # Remove cruft leaving something like: 'file:line'
    results=$(echo "$out" | cut -d$'\n' -f2- | sed -E 's/([^:]*):([0-9]*):.*/\1:\2/')

    # Check if we want to edit the results
    if [[ $edit == 1 && $results != "" ]]; then
        $EDITOR $results
    else
        IFS=$'\n' mapfile -t selected_matches <<< "$results"
        for element in "${selected_matches[@]}"; do
            echo $element
        done
        exit
    fi
done
