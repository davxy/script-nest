#!/usr/bin/env bash
#
# Run libvirt qemu VM with optionally ephemeral overlay.
#
# Author: Davide Galassi <davxy@datawok.net>
# Version: 0.0.5
#
# Guest XML config:
# /etc/libvirt/qemu/<GUEST>.xml
# Once the file is manually modified to apply the changes:
# > virsh define /etc/libvirt/qemu/<GUEST>.xml
 
NETWORK="default"
GUEST="arch-vr"
OVERLAY_MAX_SIZE=8G

TMPFS_DIR="/mnt/ramdisk"
OVERLAY="${TMPFS_DIR}/${GUEST}-overlay.qcow2"

do_stop_network=0
do_stop_guest=0
do_wipe=0
do_overlay=0

help() {
  echo "Usage: vm-run [options]"
  echo " -o|--overlay : use ramfs overlay for write operations"
  echo " -w|--wipe : remove changes after execution (imply overlay)"
  exit $1
}

start_network() {
  if virsh net-list | grep -q "${NETWORK}.*active"; then
    echo "Network ${NETWORK} is already active."
    return 0
  fi

  echo "Starting network"
  if ! virsh net-start "${NETWORK}"; then
    echo "Failed to start network: ${NETWORK}" >&2
    return 1
  fi

  max_retries=10
  retries=0
  while ! virsh net-list | grep -q "${NETWORK}.*active"; do
    if [[ $retries -ge $max_retries ]]; then
      echo "Network did not shut down after $max_retries attempts."
      return 1
    fi
    echo "Waiting for network to start... Attempt $((retries + 1))/$max_retries"
    sleep 3
    ((retries++))
  done
  do_stop_network=1
  return 0
}

stop_network() {
  if [[ $do_stop_network == 0 ]]; then
    return
  fi
  if ! virsh net-list | grep -q "${NETWORK}.*active"; then
    return
  fi

  echo "Stopping network"
  if ! virsh net-destroy "${NETWORK}"; then
    echo "Failed to destroy network: ${NETWORK}" >&2
    return
  fi

  max_retries=10
  retries=0
  while virsh net-list | grep -q "${NETWORK}.*active"; do
    if [[ $retries -ge $max_retries ]]; then
      echo "Network did not shut down after $max_retries attempts. Proceeding anyway."
      break
    fi
    virsh net-destroy "${NETWORK}"
    echo "Waiting for network to shut down. Attempt $((retries + 1))/$max_retries"
    sleep 3
    ((retries++))
  done
}

start_guest() {
  if virsh list | grep -q "${GUEST}.*running"; then
    echo "Guest is already running."
    return 0
  fi

  echo "Starting guest"
  if ! virsh start "${GUEST}"; then
    echo "Failed to start guest: ${GUEST}" >&2
    return 1
  fi

  max_retries=10
  retries=0
  while ! virsh list | grep -q "${GUEST}.*running"; do
    if [[ $retries -ge $max_retries ]]; then
      echo "Guest ${GUEST} did not started after $max_retries attempts."
      return 1
    fi
    echo "Waiting for guest to start. Attempt $((retries + 1))/$max_retries"
    sleep 3
    ((retries++))
  done
  do_stop_guest=1
  return 0
}

stop_guest() {
  if [[ $do_stop_guest == 0 ]]; then
    return
  fi

  if ! virsh list | grep -q "${GUEST}.*running"; then
    return
  fi

  echo "Stopping guest"
  if ! virsh shutdown "${GUEST}"; then
    echo "Failed to shutdown guest: ${GUEST}" >&2
    virsh destroy "${GUEST}"
    return
  fi
  sleep 3

  max_retries=10
  retries=0
  while virsh list | grep -q "${GUEST}.*running"; do
    if [[ $retries -ge $max_retries ]]; then
      echo "Guest did not shutdown after $max_retries attempts. Stopping."
      virsh destroy "${GUEST}"
      break
    fi
    virsh shutdown "${GUEST}"
    echo "Waiting for guest to shut down. Attempt $((retries + 1))/$max_retries"
    sleep 3
    ((retries++))
  done
}

prepare_overlay() {
  # Exit on errors
  set -e # Exit on errors
  set -o pipefail # Catch errors in pipes

  # Find the guest base image
  echo "Finding the base image for guest"
  BASE_IMAGE=$(virsh domblklist "${GUEST}" --details | awk '$2 == "disk" {print $4}')
  if [[ -z "${BASE_IMAGE}" ]]; then
    echo "Error: base image not defined" >&2
    exit 1
  fi
  if [[ ! -f "${BASE_IMAGE}" ]]; then
    echo "Error: base image \"${BASE_IMAGE}\" not found" >&2
    exit 1
  fi

  # Create a tmpfs directory for the overlay
  echo "Setting up tmpfs directory"
  if ! mountpoint -q "${TMPFS_DIR}"; then
    sudo mkdir -p "${TMPFS_DIR}"
    sudo mount -t tmpfs -o size=${OVERLAY_MAX_SIZE} tmpfs "${TMPFS_DIR}" 
  fi

  # Create an overlay in RAM
  echo "Creating overlay in tmpfs"
  sudo qemu-img create -f qcow2 -b "${BASE_IMAGE}" -F qcow2 "${OVERLAY}"
  echo "Overlay created: ${OVERLAY}"

  if [[ $do_wipe == 1 ]]; then
    echo "Disabling swap TODO"
    # sudo swapoff -a
  fi

  # Update VM configuration to use the overlay
  echo "Updating guest configuration to use the overlay"
  vm_config=$(virsh dumpxml "${GUEST}")
  updated_config=$(echo "${vm_config}" | sed "s|<source file='[^']*'|<source file='${OVERLAY}'|")
  echo "${updated_config}" | virsh define /dev/stdin
  echo "Guest configuration updated to use the overlay."

  # Disable exit on errors
  set +e
  set +o pipefail
}

# Restore original VM configuration
restore_original() {
  echo "Restoring guest original configuration"
  echo "${vm_config}" | virsh define /dev/stdin
}

# Commit overlay
commit_overlay() {
  local overlay_size=$(du -h $OVERLAY | awk '{ print $1 }')
  echo "Committing overlay changes into the guest base image ($overlay_size)"
  sudo qemu-img commit -p "${OVERLAY}"
}

# Clean up the tmpfs directory
delete_overlay() {
  echo "Cleaning up overlay"
  if [[ $do_wipe == 1 ]]; then
    echo "Wiping"
    sudo shred -z --remove=wipesync "${OVERLAY}"
  fi
  sudo rm -f "${OVERLAY}"
  sudo umount -l "${TMPFS_DIR}"
  sudo rm -rf "${TMPFS_DIR}"
}

# Define a cleanup function
cleanup() {
    echo "Cleaning up..."
    # Kill the background job
    echo "Kill $sudo_background_pid"
    kill "$sudo_background_pid"
}

run() {
  start_network
  if [[ $? == 1 ]]; then
    exit 1
  fi

  if [[ $do_overlay == 1 ]]; then
    sudo -v
    # Refresh sudo cretentials every 60 seconds
    (while true; do sudo -v; sleep 60; done) &
    # Get the PID of the background job
    sudo_background_pid=$!
    # Set the trap to call cleanup on EXIT, INT, or TERM
    trap cleanup EXIT INT TERM
    prepare_overlay
  fi
  start_guest
  start_res=$?
  if [[ $do_overlay == 1 ]]; then
    restore_original
  fi
  if [[ $start_res == 1 ]]; then
    exit 1
  fi

  # virt-manager -c qemu:///system --show-domain-console ${GUEST} > /dev/null 2>&1 &
  virt-viewer -a --domain-name ${GUEST} > /dev/null 2>&1 &
  local viewer_pid=$!

  echo "Waiting for virt-viewer (${viewer_pid})"
  wait "${viewer_pid}"
  echo "virt-viewer manager stopped"

  stop_guest
  stop_network

  if [[ $do_overlay == 1 ]]; then
    if [[ $do_wipe == 0 ]]; then
      commit_overlay
    fi
    delete_overlay
  fi
}

# Parse CLI options
while [[ "$#" -gt 0 ]]; do
    case $1 in
        -w|--wipe)
          do_wipe=1
          do_overlay=1
          ;;
        -o|--overlay)
          do_overlay=1
          ;;
        -h|--help)
          help 0
          ;;
        *)
          echo "Unknown option: $1" >&2;
          help 1
    esac
    shift
done

# Check dependencies
if ! command -v virsh &> /dev/null; then
    echo "'virsh' is not available."
    exit 1
fi
if ! command -v virt-viewer &> /dev/null; then
    echo "'virt-viewer' is not available."
    exit 1
fi

run
